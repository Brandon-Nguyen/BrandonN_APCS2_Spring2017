//Brandon Nguyen, 2nd Period
package textExcel;

import java.util.Arrays;

public class FormulaCell extends RealCell{
	
	private String formula;
	private Spreadsheet grid;

	public FormulaCell(String formula, Spreadsheet spreadsheet) {
		// TODO Auto-generated constructor stub
		this.formula = formula;
		this.grid = spreadsheet;
		setRealCell(formula);
	}

	public double getDoubleValue() {

		String value = this.getRealCell().substring(2, getRealCell().length() - 2);
			String[] expression = value.trim().split(" ");
			if (expression[0].toUpperCase().equals("SUM")) {
				String[] range = expression[1].toUpperCase().split("-");
				return sum(range[0], range[0], range[1]);
			} else if (expression[0].toUpperCase().equals("AVG")) {
				String[] range = expression[1].toUpperCase().split("-");
				return sum(range[0], range[0], range[1]) / countRange(range[0], range[0], range[1]);
			} else {
				for (int i = 0; i < expression.length; i++) {
					if (expression[i].toUpperCase().charAt(0) >= 'A' && expression[i].toUpperCase().charAt(0) <= 'L') {
						SpreadsheetLocation loc = grid.getLoc(expression[i].toUpperCase());
						Cell cell = grid.getSheet()[loc.getRow()][loc.getCol()];
						if (cell instanceof RealCell) {
							expression[i] = ((RealCell) cell).getDoubleValue() + "";
						} else {
							expression[i] = "";
						}
					}
				}
				double standingValue = Double.parseDouble(expression[0]);
				for (int i = 1; i < expression.length; i++) {
					if (expression[i].equals("*"))
						standingValue *= Double.parseDouble(expression[i + 1]);
					else if (expression[i].equals("/"))
						standingValue /= Double.parseDouble(expression[i + 1]);
					else if (expression[i].equals("+"))
						standingValue += Double.parseDouble(expression[i + 1]);
					else if (expression[i].equals("-"))
						standingValue -= Double.parseDouble(expression[i + 1]);
				}
				return standingValue;
			}
	}
	
	public double sum(String cell, String newCell, String end){	
		
		SpreadsheetLocation loc = new SpreadsheetLocation(newCell);
		
		if(newCell.equals(end)){
			if(grid.getSheet()[loc.getRow()][loc.getCol()] instanceof RealCell){
				return ((RealCell)grid.getSheet()[loc.getRow()][loc.getCol()]).getDoubleValue();
			}else{
				return 0.0;
			}
		}
		
		if(Character.toUpperCase(cell.charAt(0)) != Character.toUpperCase(end.charAt(0)) 
				&& Integer.parseInt(cell.substring(1)) == Integer.parseInt(end.substring(1))){
			newCell = ((char)(newCell.charAt(0) + 1)) + cell.substring(1);
			
		}else if( Character.toUpperCase(cell.charAt(0)) == Character.toUpperCase(end.charAt(0))
				&& Integer.parseInt(cell.substring(1)) <= Integer.parseInt(end.substring(1))){
			
			newCell = Character.toString(cell.charAt(0)) + (Integer.parseInt(newCell.substring(1)) + 1);
			
		}else{
			if(Integer.parseInt(newCell.substring(1)) < Integer.parseInt(end.substring(1))){
				
				newCell = Character.toString(newCell.charAt(0)) + (Integer.parseInt(newCell.substring(1)) + 1);

				
			}else if(Integer.parseInt(newCell.substring(1)) == Integer.parseInt(end.substring(1))){
				
				newCell = ((char)(newCell.charAt(0) + 1)) + "" + 1;
				
			}else{
				newCell = ((char)(newCell.charAt(0) + 1)) + "" + cell.substring(1);
				
			}
		}

		double first;
		if(grid.getSheet()[loc.getRow()][loc.getCol()] instanceof RealCell){
			 first = ((RealCell)grid.getSheet()[loc.getRow()][loc.getCol()]).getDoubleValue();
			return (first + sum(cell, newCell, end));
		}else{
			return sum(cell, newCell, end);
		}
	}
	public double countRange(String locStart, String loc1, String loc2) {
		SpreadsheetLocation loc = grid.getLoc(loc1);
		if (loc1.equals(loc2)) {
			return 1;
		} else if (loc1.substring(1).equals(loc2.substring(1))) {
			loc1 = (char) (loc1.charAt(0) + 1) + locStart.substring(1);
			if (grid.getSheet()[loc.getRow()][loc.getCol()] instanceof RealCell) {
				return 1 + countRange(locStart,loc1, loc2);
			} else {
				return countRange(locStart,loc1, loc2);
			}
		} else {
			loc1 = loc1.substring(0, 1) + (Integer.parseInt(loc1.substring(1)) + 1);
			if (grid.getSheet()[loc.getRow()][loc.getCol()] instanceof RealCell) {
				return 1 + countRange(locStart,loc1, loc2);
			} else {
				return countRange(locStart, loc1, loc2);
			}

		}
	}
}
